/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __SKEL_DEADLOCK_SKEL_H__
#define __SKEL_DEADLOCK_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct skel_deadlock {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *kprobe_bpf_prog___x64_sys_clone;
	} progs;
	struct {
		struct bpf_link *kprobe_bpf_prog___x64_sys_clone;
	} links;

#ifdef __cplusplus
	static inline struct skel_deadlock *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct skel_deadlock *open_and_load();
	static inline int load(struct skel_deadlock *skel);
	static inline int attach(struct skel_deadlock *skel);
	static inline void detach(struct skel_deadlock *skel);
	static inline void destroy(struct skel_deadlock *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
skel_deadlock__destroy(struct skel_deadlock *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
skel_deadlock__create_skeleton(struct skel_deadlock *obj);

static inline struct skel_deadlock *
skel_deadlock__open_opts(const struct bpf_object_open_opts *opts)
{
	struct skel_deadlock *obj;
	int err;

	obj = (struct skel_deadlock *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = skel_deadlock__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	skel_deadlock__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct skel_deadlock *
skel_deadlock__open(void)
{
	return skel_deadlock__open_opts(NULL);
}

static inline int
skel_deadlock__load(struct skel_deadlock *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct skel_deadlock *
skel_deadlock__open_and_load(void)
{
	struct skel_deadlock *obj;
	int err;

	obj = skel_deadlock__open();
	if (!obj)
		return NULL;
	err = skel_deadlock__load(obj);
	if (err) {
		skel_deadlock__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
skel_deadlock__attach(struct skel_deadlock *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
skel_deadlock__detach(struct skel_deadlock *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *skel_deadlock__elf_bytes(size_t *sz);

static inline int
skel_deadlock__create_skeleton(struct skel_deadlock *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "skel_deadlock";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "kprobe_bpf_prog___x64_sys_clone";
	s->progs[0].prog = &obj->progs.kprobe_bpf_prog___x64_sys_clone;
	s->progs[0].link = &obj->links.kprobe_bpf_prog___x64_sys_clone;

	s->data = (void *)skel_deadlock__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *skel_deadlock__elf_bytes(size_t *sz)
{
	*sz = 4352;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x80\x0b\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x16\0\
\x01\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x01\x11\x01\x25\x25\x13\x05\x03\x25\
\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\x06\x73\x17\0\0\x02\x2e\x01\x11\x1b\x12\
\x06\x40\x18\x7a\x19\x03\x25\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x03\
\x05\0\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x04\x24\0\x03\x25\x3e\x0b\x0b\x0b\0\
\0\x05\x0f\0\x49\x13\0\0\x06\x13\x01\x03\x25\x0b\x0b\x3a\x0b\x3b\x05\0\0\x07\
\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x05\x38\x0b\0\0\0\x1e\x01\0\0\x05\0\x01\x08\
\0\0\0\0\x01\0\x0c\0\x01\x08\0\0\0\0\0\0\0\x02\0\x10\0\0\0\x08\0\0\0\x02\0\x10\
\0\0\0\x01\x5a\x03\0\x09\x3b\0\0\0\x03\x05\0\x0d\x3f\0\0\0\0\x04\x04\x05\x04\
\x05\x44\0\0\0\x06\x1c\xa8\x01\xc5\x05\x07\x06\x1d\x01\0\0\x01\xc6\x05\0\x07\
\x08\x1d\x01\0\0\x01\xc7\x05\x08\x07\x09\x1d\x01\0\0\x01\xc8\x05\x10\x07\x0a\
\x1d\x01\0\0\x01\xc9\x05\x18\x07\x0b\x1d\x01\0\0\x01\xca\x05\x20\x07\x0c\x1d\
\x01\0\0\x01\xcb\x05\x28\x07\x0d\x1d\x01\0\0\x01\xcc\x05\x30\x07\x0e\x1d\x01\0\
\0\x01\xcd\x05\x38\x07\x0f\x1d\x01\0\0\x01\xce\x05\x40\x07\x10\x1d\x01\0\0\x01\
\xcf\x05\x48\x07\x11\x1d\x01\0\0\x01\xd0\x05\x50\x07\x12\x1d\x01\0\0\x01\xd1\
\x05\x58\x07\x13\x1d\x01\0\0\x01\xd2\x05\x60\x07\x14\x1d\x01\0\0\x01\xd3\x05\
\x68\x07\x15\x1d\x01\0\0\x01\xd4\x05\x70\x07\x16\x1d\x01\0\0\x01\xd5\x05\x78\
\x07\x17\x1d\x01\0\0\x01\xd6\x05\x80\x07\x18\x1d\x01\0\0\x01\xd7\x05\x88\x07\
\x19\x1d\x01\0\0\x01\xd8\x05\x90\x07\x1a\x1d\x01\0\0\x01\xd9\x05\x98\x07\x1b\
\x1d\x01\0\0\x01\xda\x05\xa0\0\x04\x07\x07\x08\0\x78\0\0\0\x05\0\0\0\0\0\0\0\
\x25\0\0\0\x3e\0\0\0\x54\0\0\0\x74\0\0\0\x78\0\0\0\x7c\0\0\0\x80\0\0\0\x8e\0\0\
\0\x92\0\0\0\x96\0\0\0\x9a\0\0\0\x9d\0\0\0\xa0\0\0\0\xa4\0\0\0\xa8\0\0\0\xab\0\
\0\0\xae\0\0\0\xb1\0\0\0\xb4\0\0\0\xb7\0\0\0\xba\0\0\0\xbd\0\0\0\xc5\0\0\0\xc8\
\0\0\0\xcb\0\0\0\xd1\0\0\0\xd4\0\0\0\xd7\0\0\0\x55\x62\x75\x6e\x74\x75\x20\x63\
\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\x6f\x6e\x20\x31\x34\x2e\x30\x2e\x30\
\x2d\x31\x75\x62\x75\x6e\x74\x75\x31\0\x73\x72\x63\x2f\x6b\x70\x72\x6f\x67\x2f\
\x64\x65\x61\x64\x6c\x6f\x63\x6b\x2e\x62\x70\x66\x2e\x63\0\x2f\x68\x6f\x6d\x65\
\x2f\x6c\x30\x63\x61\x6c\x68\x30\x73\x74\x2f\x79\x61\x62\x63\x63\0\x6b\x70\x72\
\x6f\x62\x65\x5f\x62\x70\x66\x5f\x70\x72\x6f\x67\x5f\x5f\x5f\x78\x36\x34\x5f\
\x73\x79\x73\x5f\x63\x6c\x6f\x6e\x65\0\x69\x6e\x74\0\x72\x65\x67\0\x72\x31\x35\
\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x72\x31\x34\0\x72\x31\
\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\
\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\
\x5f\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\0\
\x70\x74\x5f\x72\x65\x67\x73\0\x0c\0\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\x9f\
\xeb\x01\0\x18\0\0\0\0\0\0\0\x54\x01\0\0\x54\x01\0\0\xe0\0\0\0\0\0\0\0\0\0\0\
\x02\x02\0\0\0\x01\0\0\0\x15\0\0\x04\xa8\0\0\0\x09\0\0\0\x03\0\0\0\0\0\0\0\x0d\
\0\0\0\x03\0\0\0\x40\0\0\0\x11\0\0\0\x03\0\0\0\x80\0\0\0\x15\0\0\0\x03\0\0\0\
\xc0\0\0\0\x19\0\0\0\x03\0\0\0\0\x01\0\0\x1c\0\0\0\x03\0\0\0\x40\x01\0\0\x1f\0\
\0\0\x03\0\0\0\x80\x01\0\0\x23\0\0\0\x03\0\0\0\xc0\x01\0\0\x27\0\0\0\x03\0\0\0\
\0\x02\0\0\x2a\0\0\0\x03\0\0\0\x40\x02\0\0\x2d\0\0\0\x03\0\0\0\x80\x02\0\0\x30\
\0\0\0\x03\0\0\0\xc0\x02\0\0\x33\0\0\0\x03\0\0\0\0\x03\0\0\x36\0\0\0\x03\0\0\0\
\x40\x03\0\0\x39\0\0\0\x03\0\0\0\x80\x03\0\0\x3c\0\0\0\x03\0\0\0\xc0\x03\0\0\
\x44\0\0\0\x03\0\0\0\0\x04\0\0\x47\0\0\0\x03\0\0\0\x40\x04\0\0\x4a\0\0\0\x03\0\
\0\0\x80\x04\0\0\x50\0\0\0\x03\0\0\0\xc0\x04\0\0\x53\0\0\0\x03\0\0\0\0\x05\0\0\
\x56\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x05\0\0\0\x64\0\0\
\0\x01\0\0\0\x68\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x6c\0\0\0\x01\0\0\x0c\
\x04\0\0\0\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\x72\x31\
\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\
\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\
\x5f\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x72\x65\x67\0\x69\x6e\
\x74\0\x6b\x70\x72\x6f\x62\x65\x5f\x62\x70\x66\x5f\x70\x72\x6f\x67\x5f\x5f\x5f\
\x78\x36\x34\x5f\x73\x79\x73\x5f\x63\x6c\x6f\x6e\x65\0\x6b\x70\x72\x6f\x62\x65\
\x2f\x5f\x5f\x78\x36\x34\x5f\x73\x79\x73\x5f\x63\x6c\x6f\x6e\x65\0\x2f\x68\x6f\
\x6d\x65\x2f\x6c\x30\x63\x61\x6c\x68\x30\x73\x74\x2f\x79\x61\x62\x63\x63\x2f\
\x73\x72\x63\x2f\x6b\x70\x72\x6f\x67\x2f\x64\x65\x61\x64\x6c\x6f\x63\x6b\x2e\
\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\
\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x1c\0\0\0\x30\0\0\0\0\0\0\
\0\x08\0\0\0\x8c\0\0\0\x01\0\0\0\0\0\0\0\x06\0\0\0\x10\0\0\0\x8c\0\0\0\x01\0\0\
\0\0\0\0\0\xa3\0\0\0\xd2\0\0\0\x05\x3c\0\0\x0c\0\0\0\xff\xff\xff\xff\x04\0\x08\
\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x71\0\0\0\
\x05\0\x08\0\x50\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\0\0\0\x01\0\0\
\x01\x01\x01\x1f\x02\0\0\0\0\x16\0\0\0\x03\x01\x1f\x02\x0f\x05\x1e\x02\x1e\0\0\
\0\0\x52\x08\x59\x79\xcc\xfd\xa6\x41\x43\x6f\x17\x8e\x14\x78\xef\x30\x37\0\0\0\
\x01\xc2\xb4\x19\x30\x27\xf8\xb7\x08\x77\xac\x14\xda\xb7\x61\x71\x0b\x04\0\0\
\x09\x02\0\0\0\0\0\0\0\0\x03\x0d\x01\x05\x05\x0a\x13\x02\x02\0\x01\x01\x2f\x68\
\x6f\x6d\x65\x2f\x6c\x30\x63\x61\x6c\x68\x30\x73\x74\x2f\x79\x61\x62\x63\x63\0\
\x69\x6e\x63\x6c\x75\x64\x65\0\x73\x72\x63\x2f\x6b\x70\x72\x6f\x67\x2f\x64\x65\
\x61\x64\x6c\x6f\x63\x6b\x2e\x62\x70\x66\x2e\x63\0\x76\x6d\x6c\x69\x6e\x75\x78\
\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xda\0\0\0\x04\0\
\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\
\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x09\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\
\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x11\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x13\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\
\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x03\
\0\0\0\x11\0\0\0\0\0\0\0\x03\0\0\0\x04\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x08\0\
\0\0\x1f\0\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\
\0\x0c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x14\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x1c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x24\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x2c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x34\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x3c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x44\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x4c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x50\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x54\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x58\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x5c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x64\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x68\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x6c\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x70\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x74\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x78\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\
\x08\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\
\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\
\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\
\x26\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x32\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\
\x47\0\0\0\0\0\0\0\x03\0\0\0\x09\0\0\0\x61\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\
\x0a\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\
\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\
\x64\x65\x62\x75\x67\x5f\x73\x74\x72\x5f\x6f\x66\x66\x73\x65\x74\x73\0\x2e\x64\
\x65\x62\x75\x67\x5f\x73\x74\x72\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\
\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x61\x64\x64\x72\
\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\
\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x6b\x70\x72\x6f\x62\x65\x5f\x62\x70\
\x66\x5f\x70\x72\x6f\x67\x5f\x5f\x5f\x78\x36\x34\x5f\x73\x79\x73\x5f\x63\x6c\
\x6f\x6e\x65\0\x6b\x70\x72\x6f\x62\x65\x2f\x5f\x5f\x78\x36\x34\x5f\x73\x79\x73\
\x5f\x63\x6c\x6f\x6e\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\
\x6e\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\0\
\x64\x65\x61\x64\x6c\x6f\x63\x6b\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\
\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x42\x54\x46\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe9\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x81\x0a\0\0\0\0\0\0\xfe\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xa2\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x6c\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x68\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xbc\0\0\0\0\0\0\0\x22\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x64\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xd0\x07\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x15\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\
\0\x10\0\0\0\0\0\0\0\x26\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xde\
\x01\0\0\0\0\0\0\x7c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x22\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x08\0\0\0\0\0\
\0\xd0\x01\0\0\0\0\0\0\x15\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x39\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5a\x02\0\0\0\0\0\0\xdf\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x58\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x39\x03\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x54\0\0\0\x09\0\0\0\x40\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x09\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x15\0\0\0\
\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xf9\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x4c\x03\0\0\0\0\0\0\x4c\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x98\x05\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\
\x09\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x15\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\xcd\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x05\0\0\0\
\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc9\
\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x0a\0\0\0\0\0\0\x20\0\0\
\0\0\0\0\0\x15\0\0\0\x0f\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xbd\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x06\0\0\0\0\0\0\x75\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb9\0\0\0\x09\0\0\0\x40\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x0a\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x15\0\0\0\
\x11\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x44\0\0\0\x01\0\0\0\x30\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x85\x06\0\0\0\0\0\0\x41\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x74\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\
\0\0\0\0\0\0\0\0\0\x80\x0a\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x15\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf1\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xc8\x06\0\0\0\0\0\0\x08\x01\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\
\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct skel_deadlock *skel_deadlock::open(const struct bpf_object_open_opts *opts) { return skel_deadlock__open_opts(opts); }
struct skel_deadlock *skel_deadlock::open_and_load() { return skel_deadlock__open_and_load(); }
int skel_deadlock::load(struct skel_deadlock *skel) { return skel_deadlock__load(skel); }
int skel_deadlock::attach(struct skel_deadlock *skel) { return skel_deadlock__attach(skel); }
void skel_deadlock::detach(struct skel_deadlock *skel) { skel_deadlock__detach(skel); }
void skel_deadlock::destroy(struct skel_deadlock *skel) { skel_deadlock__destroy(skel); }
const void *skel_deadlock::elf_bytes(size_t *sz) { return skel_deadlock__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
skel_deadlock__assert(struct skel_deadlock *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __SKEL_DEADLOCK_SKEL_H__ */
